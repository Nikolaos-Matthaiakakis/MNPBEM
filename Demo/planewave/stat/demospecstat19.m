%  DEMOSPECSTAT19 - Light scattering of nanosphere with nonlocal permittivity.
%    For a metallic nanosphere and an incoming plane wave, this program
%    computes the scattering cross section for different light wavelengths
%    within the quasistatic approximation using a nonlocal dielectric
%    function.
%
%  Runtime on my computer:  5.4 sec.

%  We use the model of the Pendry group, Yu Luo et al., PRL 111, 093901
%  (2013), where a hydrodynamic description of the metal electrons is
%  mapped onto an effective model.  Here, the metal is described in terms
%  of a local Drude-type dielectric function, and the nonlocal effects are
%  emulated by a thin, artificial cover layer with a given local
%  permittivity.

%%  initialization
%  options for BEM simulation
%    for retarded simulations set 'sim' to 'ret'
op = bemoptions( 'sim', 'stat', 'waitbar', 1, 'interp', 'curv' );
%  For the thin artificial cover layer, we have to integrate over two close
%  boundary elements.  The refined integration over these elements, which
%  is performed in the function REFUN passed to the BEM solver, is done
%  using polar coordinates.  It is thus a good idea to increase the number
%  of integration points for polar integration
op = bemoptions( op, 'npol', 20 );

%  thickness of artificial layer
d = 0.05;
%  longitudinal plasmon wavenumber, see Yu Luo et al., PRL 111, 093901 (2013).
units;
ql = @( w ) 2 * pi * sqrt( 3.3 ^ 2 - w .* ( w + 1i * 0.165 ) ) / ( 0.0036 * eV2nm );
%  table of dielectric functions
%    eps1 - dielectric constant of embedding medium
%    eps2 - Drude-type dielectric function representative for gold
%    eps3 - artificial permittivity according to description of Luo et al.
eps1 = epsconst( 1 );
eps2 = epsfun( @( w ) 1 - 3.3 ^ 2 ./ ( w .* ( w + 1i * 0.165 ) ), 'eV' );
eps3 = epsfun( @( enei ) eps2( enei ) .* eps1( enei ) ./  ...
            ( eps2( enei ) - eps1( enei ) ) .* ql( eV2nm ./ enei ) * d );
          
% %  plot dielectric function,  Fig. 1(c) of Luo et al.
% x = linspace( 0, 1, 201 );
% h = plotyy( x,   real( eps3( eV2nm ./ ( x * 3.3 ) ) ) / d,  ...
%             x, - imag( eps3( eV2nm ./ ( x * 3.3 ) ) ) / d );
% %  annotate plot
% xlabel( '\omega/\omega_p');
% legend( 'real', 'imag' );  set( h( 1 ), 'ylim', [ 0, 6 ] );

epstab = { eps1, eps2, eps3 };
%  diameter of sphere
diameter = 10;
%  initialize sphere
%    The inner sphere, which separates the Drude metal from the artificial
%    cover layer, is generated by shifting all vertices by a distance D
%    along the directions of the outer surface normals. 
p2 = trisphere( 144, diameter - 2 * d );
p1 = coverlayer.shift( p2, d );
%  make COMPARTICLE object
p = comparticle( epstab, { p1, p2 }, [ 3, 1; 2, 3 ], 1, 2, op );

% %  plot cover layer
% plot( select( p1, 'carfun', @(x,y,z)x<0 ), 'FaceColor', [ 1, 0, 0 ] );
% plot( select( p2, 'carfun', @(x,y,z)x<0 ), 'FaceColor', [ 0, 0, 1 ] );

%%  BEM simulation
%  set up BEM solver
%    We have to be careful about the Green function refinement for
%    neighbour boundary elements of the cover layer.  This integration is
%    performed in polar coordinates (check for convergence of NPOL) in the
%    function coverlayer.refine passed to the BEM solver.  [ 1, 2 ]
%    indicate the two cover layer boundaries, where one layer is produced
%    through the coverlayer.shift function.
bem = bemsolver( p, op, 'refun', coverlayer.refine( p, [ 1, 2 ] ) );

%  plane wave excitation
exc = planewave( [ 1, 0, 0; 0, 1, 0 ], [ 0, 0, 1; 0, 0, 1 ], op );
%  light wavelength in vacuum
enei = linspace( 400, 800, 60 );
%  allocate scattering and extinction cross sections
sca = zeros( length( enei ), 2 );
ext = zeros( length( enei ), 2 );

multiWaitbar( 'BEM solver', 0, 'Color', 'g', 'CanCancel', 'on' );
%  loop over wavelengths
for ien = 1 : length( enei )
  %  surface charge
  sig = bem \ exc( p, enei( ien ) );
  %  scattering and extinction cross sections
  sca( ien, : ) = exc.sca( sig );
  ext( ien, : ) = exc.ext( sig );
  
  multiWaitbar( 'BEM solver', ien / numel( enei ) );
end
%  close waitbar
multiWaitbar( 'CloseAll' );

%%  final plot
plot( enei, sca, 'o-'  );  hold on;

xlabel( 'Wavelength (nm)' );
ylabel( 'Scattering cross section (nm^2)' );

%%  comparison with Mie theory
mie = miesolver( epstab{ 2 }, epstab{ 1 }, diameter, op );

plot( enei, mie.sca( enei ), 'r+' );

legend( 'BEM : x-polarization', 'BEM : y-polarization', 'Mie theory' );
