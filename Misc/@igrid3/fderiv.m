function fun = fderiv( obj, x, y, z, dir )
%  FDERIV - Derivative function for points (x,y,z).
%    Given a trilinear interpolation of a tabulated 2d function, FDERIV
%    returns a function handle for the function derivative along a given
%    direction.
%
%  Usage for obj = igrid3 :
%    fun = finterp( obj, x, y, z, dir )
%  Input
%    x, y,z     :  interpolation points (x,y,z)
%    dir        :  derivative direction (1 for x, 2 for y, 3 for z)
%  Output
%    fun        :  derivative function
%
%  Given an array V with tabulated values at positions (obj.x,obj.y,obj.z)
%  the derivative of the interpolation function at positions (x,y,z) an
%  along direction DIR can be computed from VI = fun(V).

%  index to grid positions
[ ~, ix ] = histc( x( : ), obj.x );  assert( all( ix ~= 0 ) );
[ ~, iy ] = histc( y( : ), obj.y );  assert( all( iy ~= 0 ) );
[ ~, iz ] = histc( z( : ), obj.z );  assert( all( iz ~= 0 ) );
%  handle case  x == max( obj.x )  or similar for y, z
ix = min( ix, numel( obj.x ) - 1 );
iy = min( iy, numel( obj.y ) - 1 );
iz = min( iz, numel( obj.z ) - 1 );
%  bin sizes and bin coordinates
hx = ( obj.x( ix + 1 ) - obj.x( ix ) ) .';  xx = ( x( : ) - obj.x( ix ) .' ) ./ hx;
hy = ( obj.y( iy + 1 ) - obj.y( iy ) ) .';  yy = ( y( : ) - obj.y( iy ) .' ) ./ hy;
hz = ( obj.z( iz + 1 ) - obj.z( iz ) ) .';  zz = ( z( : ) - obj.z( iz ) .' ) ./ hz;

%  size of interpolation array
siz = [ numel( obj.x ), numel( obj.y ), numel( obj.z ) ];
%  interpolation indices
ind = [ sub2ind( siz, ix + 0, iy + 0, iz + 0 ),  ...
        sub2ind( siz, ix + 1, iy + 0, iz + 0 ),  ...
        sub2ind( siz, ix + 0, iy + 1, iz + 0 ),  ...
        sub2ind( siz, ix + 1, iy + 1, iz + 0 ),  ...
        sub2ind( siz, ix + 0, iy + 0, iz + 1 ),  ...
        sub2ind( siz, ix + 1, iy + 0, iz + 1 ),  ...
        sub2ind( siz, ix + 0, iy + 1, iz + 1 ),  ...
        sub2ind( siz, ix + 1, iy + 1, iz + 1 ) ];
      
%  interpolation weights
%     [ ( 1 - xx ) .* ( 1 - yy ) .* ( 1 - zz ),  ...
%             xx   .* ( 1 - yy ) .* ( 1 - zz ),  ...
%       ( 1 - xx ) .*       yy   .* ( 1 - zz ),  ...
%             xx   .*       yy   .* ( 1 - zz ),  ...
%       ( 1 - xx ) .* ( 1 - yy ) .*       zz  ,  ...
%             xx   .* ( 1 - yy ) .*       zz  ,  ...
%       ( 1 - xx ) .*       yy   .*       zz  ,  ...
%             xx   .*       yy   .*       zz ];
%  derivative of interpolation weights
switch dir
  case 1
    w = [ ( - hx ) .* ( 1 - yy ) .* ( 1 - zz ),  ...
              hx   .* ( 1 - yy ) .* ( 1 - zz ),  ...
          ( - hx ) .*       yy   .* ( 1 - zz ),  ...
              hx   .*       yy   .* ( 1 - zz ),  ...
          ( - hx ) .* ( 1 - yy ) .*       zz  ,  ...
              hx   .* ( 1 - yy ) .*       zz  ,  ...
          ( - hx ) .*       yy   .*       zz  ,  ...
              hx   .*       yy   .*       zz ];      
  case 2
    w = [ ( 1 - xx ) .* ( - hy ) .* ( 1 - zz ),  ...
                xx   .* ( - hy ) .* ( 1 - zz ),  ...
          ( 1 - xx ) .*     hy   .* ( 1 - zz ),  ...
                xx   .*     hy   .* ( 1 - zz ),  ...
          ( 1 - xx ) .* ( - hy ) .*       zz  ,  ...
                xx   .* ( - hy ) .*       zz  ,  ...
          ( 1 - xx ) .*     hy   .*       zz  ,  ...
                xx   .*     hy   .*       zz ];
  case 3
    w = [ ( 1 - xx ) .* ( 1 - yy ) .* ( - hz ),  ...
                xx   .* ( 1 - yy ) .* ( - hz ),  ...
          ( 1 - xx ) .*       yy   .* ( - hz ),  ...
                xx   .*       yy   .* ( - hz ),  ...
          ( 1 - xx ) .* ( 1 - yy ) .*     hz  ,  ...
                xx   .* ( 1 - yy ) .*     hz  ,  ...
          ( 1 - xx ) .*       yy   .*     hz  ,  ...
                xx   .*       yy   .*     hz ];
end

%  derivative for interpolation function
fun = @( v ) reshape( sum( w .* v( ind ), 2 ), size( x ) );
